@model IEnumerable<PlataformaEDUGEP.Models.FolderAuditViewModel>

@{
    ViewData["Title"] = "Audit Log";
}

<h2>Relatório de ocorrências de pastas</h2>

@{
    var currentFilterUser = ViewData["CurrentFilterUser"]?.ToString();
    var currentFilterAction = ViewData["CurrentFilterAction"]?.ToString();
    var currentFilterFolderName = ViewData["CurrentFilterFolderName"]?.ToString();
    var currentSort = ViewData["CurrentSort"]?.ToString();
}

<form class="my-2 my-lg-0">
    <div class="d-flex flex-row">
        <input class="form-control mr-2" type="search" oninput="updateAuditLog()" placeholder="Utilizador" aria-label="Search User" name="searchUser" value="@currentFilterUser">
        <input class="form-control mr-2" type="search" oninput="updateAuditLog()" placeholder="Tipo de ação" aria-label="Search Action" name="searchAction" value="@currentFilterAction">
        <input class="form-control mr-2" type="search" oninput="updateAuditLog()" placeholder="Nome da Pasta" aria-label="Search Folder Name" name="searchFolderName" value="@currentFilterFolderName">
    </div>
</form>


<div class="mt-2 d-flex align-items-center">
    <button id="clearFiltersButton" onclick="clearFilters()" class="btn btn-secondary mr-2" style="display: none;">Limpar filtros</button>
    <b class="ms-lg-2">Ordenar:</b>

    <!-- Adjust the initial data-sort-order and icon class to match the default sort order -->
    <a href="#" id="sortOrderLink" data-sort-order="time_desc" class="ms-lg-2">
        Hora <i class="fas fa-arrow-down"></i> <!-- Default is desc so show arrow down -->
    </a>


    <form asp-action="ClearAuditLog" asp-controller="Folders" method="post" class="ms-lg-3">
        @Html.AntiForgeryToken()
        <!-- Button to trigger modal -->
        <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#confirmDeleteModal">
            Resetar registo de ocorrências
        </button>
    </form>

</div>

<div id="audit-log-table">
    @Html.Partial("_AuditLogTablePartial", Model)
</div>

<!-- Delete Audit Log Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteFolderModalLabel">Apagar Registo de Auditoria</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Tem a certeza que deseja apagar todo o registo de ocorrências? Esta ação não pode ser desfeita.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" onclick="clearAuditLog()">Apagar Tudo</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        function clearFilters() {
            $("input[name='searchUser']").val('');
            $("input[name='searchAction']").val('');
            $("input[name='searchFolderName']").val('');
            $("#clearFiltersButton").hide(); // Hide the "Limpar filtros" button
            updateAuditLog('', '', ''); // Call with empty values to reset
        }

        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById('sortOrderLink').addEventListener('click', function (e) {
                e.preventDefault(); // Prevent the default link action

                // Determine the current sort order and calculate the new sort order
                var currentSortOrder = this.getAttribute('data-sort-order');
                var newSortOrder = currentSortOrder === 'time_desc' ? 'time_asc' : 'time_desc';

                // Update the data-sort-order attribute to the new sort order BEFORE calling updateAuditLog
                this.setAttribute('data-sort-order', newSortOrder);

                // Update the icon to reflect the new sort order immediately
                updateSortIcon(newSortOrder);

                // Now call updateAuditLog with the new sort order
                updateAuditLog(null, null, null, newSortOrder);
            });
        });

        function updateSortIcon(sortOrder) {
            var iconElement = document.querySelector('#sortOrderLink i');
            if (iconElement) {
                // Reset the icon classes
                iconElement.classList.remove('fa-arrow-up', 'fa-arrow-down');
                // Apply the correct class based on the new sort order
                var iconClass = sortOrder === 'time_desc' ? 'fa-arrow-down' : 'fa-arrow-up';
                iconElement.classList.add(iconClass);
            }
        }

        // Ensure the updateAuditLog function properly handles the sortOrder parameter and correctly refreshes the content
        function updateAuditLog(searchUser, searchAction, searchFolderName, sortOrder) {
            searchUser = searchUser || $("input[name='searchUser']").val();
            searchAction = searchAction || $("input[name='searchAction']").val();
            searchFolderName = searchFolderName || $("input[name='searchFolderName']").val();

            // Show the clear filters button if any of the inputs have a value
            if (searchUser.length > 0 || searchAction.length > 0 || searchFolderName.length > 0) {
                $("#clearFiltersButton").show();
            } else {
                $("#clearFiltersButton").hide();
            }

            $.get('@Url.Action("AuditLog", "Folders")', {
                searchUser: searchUser,
                searchAction: searchAction,
                searchFolderName: searchFolderName,
                sortOrder: sortOrder
            }, function (data) {
                $('#audit-log-table').html(data);
                // No need to update the input values here since they're already being maintained
            }).fail(function () {
                console.error("Failed to fetch data"); // Error handling
            });
        }

        function clearAuditLog() {
            if (!confirm('Tem a certeza que deseja apagar todo o registo de auditoria? Esta ação não pode ser desfeita.')) {
                return; // Exit if the user cancels
            }

            $.ajax({
                type: "POST",
                url: '@Url.Action("ClearAuditLog", "Folders")',
                beforeSend: function (xhr) {
                    var token = $('input[name="__RequestVerificationToken"]').val(); // Ensure you are fetching the token correctly.
                    xhr.setRequestHeader("RequestVerificationToken", token); // Set the token in the request header.
                },
                success: function (response) {
                    $('#confirmDeleteModal').modal('hide');
                    alert("Registo de auditoria apagado com sucesso."); // Notify user
                    location.reload(); // Reload the page to reflect changes
                },
                error: function (xhr, status, error) {
                    alert("Erro ao apagar registo de auditoria.");
                }
            });
        }
    </script>

}