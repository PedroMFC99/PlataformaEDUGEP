@model PlataformaEDUGEP.Models.Folder

@{
    ViewData["Title"] = "Ver ficheiros";
    var currentSortOrder = ViewBag.CurrentSortOrder;
    var currentFileTitle = ViewBag.CurrentFileTitle;
    var currentAddedBy = ViewBag.CurrentAddedBy;
}

<!-- Alert placeholder div -->
<div id="alertPlaceholder" class="mb-3"></div>

<div class="container-fluid">
    <div class="row align-items-center mb-3">
        <div class="col-auto">
            <a href="@Url.Action("Index")" class="btn btn-link"><i class="fas fa-arrow-left"></i> Voltar</a>
        </div>
        <div class="col d-flex justify-content-start align-items-center">
            <h4 class="mb-0">Detalhes</h4>
        </div>
    </div>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.CreationDate)
        </dt>
        <dd class="col-sm-10">
            @Model.CreationDate.ToString("dd/MM/yyyy HH:mm")
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.ModificationDate)
        </dt>
        <dd class="col-sm-10">
            @Model.ModificationDate.ToString("dd/MM/yyyy HH:mm")
        </dd>

        <!-- Display Tags -->
        <dt class="col-sm-2">Etiquetas</dt>
        <dd class="col-sm-10">
            @if (Model.Tags != null && Model.Tags.Any())
            {
                foreach (var tag in Model.Tags)
                {
                    <span class="badge bg-info">@tag.Name</span>
                }
            }
            else
            {
                <span>Nenhuma etiqueta associada.</span>
            }
        </dd>

        <dt class="col-sm-2">
            Criado por:
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.User.FullName)
        </dd>
    </dl>
</div>

<hr />

<h4>Ficheiros</h4>

@if (User.IsInRole("Teacher") || User.IsInRole("Admin"))
{
    <div class="d-flex justify-content-end mb-3">
        <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#createFileModal"><i class="fas fa-plus"></i></button>
    </div>
}

<!-- Above the files table -->
<form method="get">
    <div class="input-group mb-3">
        <input type="search" class="form-control" placeholder="Título do ficheiro" name="fileTitle" value="@ViewBag.CurrentFileTitle" aria-label="Título do ficheiro">
        <input type="search" class="form-control" placeholder="Adicionado por" name="addedBy" value="@ViewBag.CurrentAddedBy" aria-label="Adicionado por">
        <input type="hidden" name="sortOrder" value="@ViewBag.CurrentSortOrder">
        <button class="btn btn-outline-secondary" type="submit">Pesquisar</button>
    </div>
</form>

<!-- Table header for sorting by upload date -->
<th>
    <!-- Clear Filters Button, initially hidden -->
    <a href="@Url.Action("Details", new { id = Model.FolderId })" class="btn btn-secondary mr-3" id="clearFiltersBtn" style="display:none;">Limpar filtros</a>

    <span class="mr-3 align-self-center"><strong>Ordenar:</strong></span>
    <a href="@Url.Action("Details", new { id = Model.FolderId, sortOrder = ViewBag.NextSortOrder, fileTitle = currentFileTitle, addedBy = currentAddedBy })">
        Data de upload @Html.Raw(ViewBag.UploadDateSortIcon)
    </a>
</th>

<hr />

@if (Model.StoredFiles != null && Model.StoredFiles.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Título do ficheiro</th>
                <th>Ficheiro</th>
                <th>Data de upload</th>
                <th>Adicionado por</th>
                <th>Última edição por</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in Model.StoredFiles)
            {
                <tr>
                    <td>@file.StoredFileTitle</td>
                    <td>
                        <!-- Link to preview the file -->
                        <a href="@Url.Action("PreviewFile", "StoredFiles", new { fileName = file.StoredFileName })" target="_blank">Preview</a>
                        <!-- Optionally, a direct download link -->
                        <a href="@Url.Action("DownloadFile", "StoredFiles", new { fileName = file.StoredFileName })" class="ms-2">Download</a>
                    </td>
                    <td>@file.UploadDate.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@file.User.FullName</td>
                    <td>
                        @if (!string.IsNullOrEmpty(file.LastEditorFullName))
                        {
                            <i class="fas fa-edit"></i> @file.LastEditorFullName
                        }
                        else
                        {
                            <text>N/A</text>
                        }
                    </td>
                    <td>
                        @if (User.IsInRole("Teacher") || User.IsInRole("Admin"))
                        {
                            <!-- Edit Link -->
                            <button type="button" class="btn btn-sm btn-primary edit-file-btn"
                                    data-bs-toggle="modal" data-bs-target="#editFileModal"
                                    data-id="@file.StoredFileId" data-folder-id="@file.FolderId"
                                    data-title="@file.StoredFileTitle">
                                <i class="fas fa-edit"></i>
                            </button>
                            <!-- Delete Button triggers Modal -->
                            <button class="btn btn-sm btn-danger delete-file-btn" data-id="@file.StoredFileId" data-bs-toggle="modal" data-bs-target="#confirmDeleteFileModal">
                                <i class="fas fa-trash"></i>
                            </button>
                        }
                        else
                        {
                            <!-- Placeholder icon for students -->
                            <i class="fas fa-lock text-muted ms-3" data-toggle="tooltip" title="Não tem permissões para manipular ficheiros"></i>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-info" role="alert">
        A pasta não contém nenhum ficheiro.
    </div>
}


<!-- Create File Modal -->
<div class="modal fade" id="createFileModal" tabindex="-1" aria-labelledby="createFileModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="createForm" method="post" enctype="multipart/form-data">
                <div class="modal-header">
                    <h5 class="modal-title" id="createFileModalLabel">Adicionar Ficheiro</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="FolderId" value="@Model.FolderId" />
                    <div class="form-group mb-3">
                        <label for="storedFileName">Nome do Ficheiro</label>
                        <input type="text" class="form-control" id="storedFileName" name="storedFileName" required>
                    </div>
                    <div class="form-group">
                        <label for="fileData">Ficheiro</label>
                        <input type="file" class="form-control" id="fileData" name="fileData" required>
                    </div>
                    <div id="createFileError" class="text-danger"></div>
                </div>
                <div class="modal-footer" style="display: flex; justify-content: center; align-items: center;">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Adicionar</button>
                </div>
            </form>
        </div>
    </div>
</div>


<!-- Edit File Modal -->
<div class="modal fade" id="editFileModal" tabindex="-1" aria-labelledby="editFileModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="editFileForm" method="post" enctype="multipart/form-data">
                <div class="modal-header">
                    <h5 class="modal-title" id="editFileModalLabel">Editar Ficheiro</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="editStoredFileId" name="StoredFileId">
                    <div class="form-group mb-3">
                        <label for="editStoredFileTitle">Título do ficheiro</label>
                        <input type="text" class="form-control" id="editStoredFileTitle" name="StoredFileTitle">
                    </div>
                    <div class="form-group mb-3">
                        <label for="newFileData">Novo ficheiro?</label>
                        <input type="file" class="form-control" id="newFileData" name="newFileData">
                    </div>
                    <div id="editFileError" class="text-danger"></div>
                    <div class="form-group">
                        <label for="editFolderId" class="control-label">Escolher pasta</label>
                        <select id="editFolderId" class="form-control" name="FolderId"></select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <input type="submit" value="Guardar alterações" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>
</div>


<!-- Delete File Confirmation Modal -->
<div class="modal fade" id="confirmDeleteFileModal" tabindex="-1" aria-labelledby="confirmDeleteFileModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDeleteFileModalLabel">Confirmar Exclusão do Ficheiro</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Tem certeza de que deseja excluir este ficheiro? Esta ação não pode ser desfeita.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="confirm-delete-file">Excluir</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        function showBootstrapAlert(type, message) {
            // Define the alert placeholder
            var alertPlaceholder = $('#alertPlaceholder');

            // Ensure the placeholder is empty before adding a new alert
            alertPlaceholder.empty();

            // Create a Bootstrap alert element
            var alertElement = $('<div>')
                .addClass('alert alert-' + type + ' alert-dismissible fade show')
                .attr('role', 'alert')
                .html(message)
                .append(
                    $('<button>')
                        .attr('type', 'button')
                        .addClass('btn-close')
                        .attr('data-bs-dismiss', 'alert')
                        .attr('aria-label', 'Close')
                );

            // Append the alert to the designated placeholder
            alertPlaceholder.append(alertElement);

            // Automatically dismiss the alert after 3 seconds (3000 milliseconds)
            setTimeout(function () {
                alertElement.alert('close');
            }, 2000);
        }
    </script>

    <script>
        $(document).ready(function () {
            $('#createForm').submit(function (e) {
                e.preventDefault();
                // Validate file before submitting
                if (!validateFile('fileData', 'createFileError')) {
                    return false; // Stop form submission
                }
                var formData = new FormData(this);
                $.ajax({
                    url: '@Url.Action("Create", "StoredFiles")',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (data) {
                        $('#createFileModal').modal('hide');
                        showBootstrapAlert('success', 'Ficheiro adicionado com sucesso.');
                        // Delay reloading to let the alert show
                        setTimeout(function () {
                            location.reload();
                        }, 1500); // Adjust time as needed
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // Show error alert
                        showBootstrapAlert('danger', 'Erro ao adicionar ficheiro: ' + textStatus);
                    }
                });
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            // Example of populating the folder dropdown
            // Assuming `folders` is available and contains your folders data
            var folders = @Html.Raw(ViewBag.FoldersJson); // Make sure to encode your folders data into a ViewBag in your controller
            folders.forEach(function (folder) {
                $('#editFolderId').append(new Option(folder.Name, folder.FolderId));
            });

            $('.edit-file-btn').on('click', function () {
                var fileId = $(this).data('id');
                var folderId = $(this).data('folder-id');
                var fileTitle = $(this).data('title'); // Get the title from data attribute

                // Set the values in the form, including the title
                $('#editStoredFileId').val(fileId);
                $('#editFolderId').val(folderId);
                $('#editStoredFileTitle').val(fileTitle); // Set the input box value to the current title
            });
        });
    </script>

    <script>
        $('#editFileForm').submit(function (e) {
            e.preventDefault();
            // Validate the file only if a new file has been selected
            if ($('#newFileData').val() && !validateFile('newFileData', 'editFileError')) {
                return false; // Stop form submission
            }
            var formData = new FormData(this);
            var fileId = $('#editStoredFileId').val(); // Get the file ID to construct the URL

            $.ajax({
                url: '@Url.Action("Edit", "StoredFiles")/' + fileId,
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                success: function (response) {
                    $('#editFileModal').modal('hide');
                    if (response.success) {
                        // Display a Bootstrap success alert in the designated placeholder
                        showBootstrapAlert('success', 'Ficheiro editado com sucesso.');
                        // Delay the page reload to let the user see the alert
                        setTimeout(function () {
                            location.reload();
                        }, 1500); // This delay should match the alert dismiss time
                    } else {
                        // Handle failure case, perhaps with a different alert
                        showBootstrapAlert('danger', 'Error: ' + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    var errorMessage = xhr.status + ': ' + xhr.statusText;
                    console.log('Error - ' + errorMessage);
                    // It might be helpful to show this error in a user-friendly manner
                    alert('Error - ' + errorMessage);
                }
            });
        });
    </script>


    <script>
        $(document).ready(function () {
            var fileIdToDelete = 0;
            $('.delete-file-btn').on('click', function () {
                fileIdToDelete = $(this).data('id'); // Set the file ID to delete
            });

            $('#confirm-delete-file').on('click', function () {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("AjaxDeleteFile", "StoredFiles")/' + fileIdToDelete,
                    headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                    success: function (response) {
                        if (response.success) {
                            $('#confirmDeleteFileModal').modal('hide');
                            showBootstrapAlert('success', 'Ficheiro excluído com sucesso.');
                            // Delay reloading to let the alert show
                            setTimeout(function () {
                                location.reload();
                            }, 1500); // Adjust time as needed
                        } else {
                            showBootstrapAlert('danger', 'Error: ' + response.message);
                        }
                    },
                    error: function () {
                        // Show error alert
                        showBootstrapAlert('danger', 'Algo deu errado.');
                    }
                });
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            // Function to check the value of the input fields and show/hide the clear button
            function toggleClearButton() {
                if ($('#fileTitleInput').val().length > 0 || $('#addedByInput').val().length > 0) {
                    $('#clearFiltersBtn').show();
                } else {
                    $('#clearFiltersBtn').hide();
                }
            }

            // Assign IDs to your input fields for easier selection
            $('input[name="fileTitle"]').attr('id', 'fileTitleInput');
            $('input[name="addedBy"]').attr('id', 'addedByInput');

            // Check initially if there's any need to show the clear button
            toggleClearButton();

            // Bind the input event to both fields to check for changes
            $('#fileTitleInput, #addedByInput').on('input', function () {
                toggleClearButton();
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            // Initialize Bootstrap tooltips
            $('[data-toggle="tooltip"]').tooltip();
        });
    </script>

    <script>
        const allowedExtensions = {
            ".pdf": 10485760, // 10 MB
            ".png": 5242880,  // 5 MB
            ".jpg": 5242880   // 5 MB
        };

        function validateFile(inputId, errorMessageId) {
            var inputFile = document.getElementById(inputId);
            var file = inputFile ? inputFile.files[0] : null;
            var errorElement = document.getElementById(errorMessageId);

            // Clear previous messages
            errorElement.innerHTML = '';

            if (file) {
                var fileSize = file.size;
                var fileExtension = '.' + file.name.split('.').pop().toLowerCase();

                if (!(fileExtension in allowedExtensions)) {
                    errorElement.innerHTML = 'Tipo de arquivo não permitido.';
                    return false;
                } else if (fileSize > allowedExtensions[fileExtension]) {
                    errorElement.innerHTML = `O arquivo excede o tamanho máximo permitido de ${(allowedExtensions[fileExtension] / 1024 / 1024).toFixed(2)} MB.`;
                    return false;
                }
            }
            return true;
        }
    </script>
}